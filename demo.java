>REVOKTELECT FNAME,LNSQL Commands/SQL Statements:

1 DDL(Data Definition Language)
 >CREATE
 >ALTER
 >DROP
 >TRUNCATC

2 DCL(Data Control Language)

3 DML(Data Maipalation Language)
 >INSERT
 >UPDATE
 >DEZETE

4 DQL(Data Query Language)
 >SELECT
 >PCOJECTION

5 TCL(Transaction Control Language)
 >COMMIT
AME
FROM EMP;

2. WAQTD THE FIRST NAME,JOB,SALARY FROM EMP TABLE.

SELECT FNAME,JOB,SAL
FROM  >ROLLBOCK
 >SAVENOINT
--------------------------------------------------------------------------------------------------18/7/2024---------------------------------------------------------------------------------
DELETE FROM ACC;

1. WAQTD THE FIRST AND LAST NAME FROM 
AME
FROM EMP;

2. WAQTD THE FIRST NAME,JOB,SALARY FROM EMP TABLE.

SELECT FNAME,JOB,SAL
FROM EMP;

3. WAQTD THE FIRST NAME,SALARY ALONG WITH ANNUAL SALARY.

SELECT FNAME,SAL,SAL*12
FROM EMP;

4. WAQTD THE FIRST NAME,LAST NAME,SALARY ALONG WITH ANNUAL SALARY WITH 50000 BONUS.\

SELECT*,SAL*12
FROM EMP;
 
5. WQTD THE DETALS OF EMP ALONG WITH ANNAL SALARY.
SELECT *,12
FROM EMP;

6. WAQTD THE EMP FIRST,LAST NAME,SALARY WITH Rs.10000 HIKE.
SELECT FNAME,LNAME,SAL+10000
FROM EMP;

7. WAQTD THE EMP FIRST NAME,LAST NAME ,SALARY WITH 5% HIKE.
>SELECT FNAME,SAL+SAL*15/100
FEOM ENP;
OR
>SELECT FNAME,LNAME,SAL*(1+0.05)
FROM EMP;

8. WQTD THE EMP F





10. WAQTD THE EMP FRIST NAME,SALARY WITH 7% DEDUCTION AND ANNUAL SALARY WITH 15% HIKE.
>SELECT FNAME,SAL-(SAL*7/100),(SAL*15/100))*12
FROM EMP;

ALIAS it is a alterative name given to the columns or the resultant tales.

syntax: SELECT Column_name_1 AS alias_1,
               column_name_2 AS alias_2,
               COLUMN_NAME_3 " alias_3    
               FROM table_name;
Example : SELECT SAL-(SAL*7/100) AS "7% DEDUCTION"

>We pass alias name either by using AS keyword or double 
>with or without us

12.WQTD THE DIFFERENT ROPLES AVAILABLE IN THE COMPANY.
>SELECT JOB
FROM EMP;

DISTINCT
_______
DIFFRENCE BE 


DISTINCT
>Distinct is used to avoid the duplicates form the resultant table.
>we can pass multiple columns inside DI 
13. WAQTD THE DIFFERENT DEPTS AVAILABLE IN THE COMPANY.
>FROM EMP;

13. WQTD THE DIFFRENT AVAILABLE IN THE COMPANY.
>SELECT DISTINCT DNO
FROM EMP;
PROJECTION: it is used to retrieve the records from the table by using column names.
syntax: SELECT COLUMN_NMAE
FROM table_name;

FORM clause:
_______________
>FORM clause is used to put the given table under execution.
>it is a frist executable clause.
> it takes table name as a argumemt.
SELECT clause
_______________
> it is used to display the records.

14. WAQTD THE DETAILS OF EMP WHOSE NAME IS AMAN.
>SELECT*
FROM EMP
WHERE FNAME+SIDDU;

15.WAQTD THE DETAILS OF EMP WHO GETTING SALARY MORE THAN 35000.
>SELECT*
FROM EMP 
WHERE SAL>35000;
SELECTION
___________
it is used to ret

16. WAQTD THE FNAME,LNAME OF THE EMP IF THE LAST NAME IS SHETTY.
SELECT FNAME,LNAME
WHERE LNAME='SHETTY';

17. WAQTD TE DETAILS OF EMP WHO ARE WORKING IN DEPT 110

SELECTION

18. WAQTD THE FRIST NAME ,LNAME,DOB IF THE EMP WAS BORN AFTER THE YEAR 1995.
SELECT FNMAE,LNAME,DOB
FROM EMP
WHERE DOB>'1995-12-31';

19. WAQTD THE DETAILS OF EMP WHO WERE HIRED BEFORE THE YEAR 2020.
SELECT*
FROM EMP
WHERE DOJ<'2020-01-01';


20. 
SELECT*
FROM EMP
WHERE SAL>32000 AND SAL<45000;

OPERATORS
_________
1 Arithmetic Operators(+,-,*,/,%)
2 Relatonal operators(>,<,
3
4
5

AND:  the out put will be true if all the conditions are true.
OR
the output will be true if any one of the condition is true.

21. WAQTD THE DETAILS OF EMP ARE WORKING AS SALESMAN, MANAGER OR DEVELOPER.
>SELECT*
FROM EMP
WHERE JOB='SALESMAN' OR  JOB='MANAGER' OR JOB='DEVELOPER';

22. WAQTD THE EMP FNAME,SAL AND IF THE EMP IS WORKING AS DISPATCHER IN DEPT NO 110.
SELECT FNAME,SAL,DNO
WHERE JOB='DISPATCHER' AND DOB<='1995-12-31';

24. WAQTD THE DETAILS OF EMP WHO ARE WORKING AS DEVELPER OR TESTER AND GETTING SALARY MORE THAN 30000
SELECT*
FROM EMP
WHERE JOB='DEVELOPER' OR JOB='TESTER') AND SAL>30000;

25. WAQTD THE EMP FNAME,LNAME IF THE EMP IS FEMALE,WORKING AS SALESMAN OR DEVELOPER AND GETTING SALARY MORE THAN 31000,
SELECT*
FORM EMP
WHERE GENDER='F' AND(JOB='SALESMAN' OR JOB='DEVELOPER') AND SAL>31000;

26 WAQTD THE DETALS ALONG WITH ANNUAL SAL
SELECT*,SAL*12 ANNUAL_SAL
FORM EMP
WHERE SAL*12>2500000;


27. WAQTD THE EMP FIRST NAME,LAST NAME, DOB IF THE EMP IS WORKING AS SALESMAN,MANAGER,DEVELOPER OR TESTER IN DEPT 110 OR 111 OR 112 AND GETTING SALARY MORE THAN 30000 BUT LESS THAN 50000.
SELECT FNAME,LNAME,DOB,DOJ,JOB,DNO,SAL
FROM EMP
WHERE(JOB=''SALESMAN' OR JOB='DEVELOPER' OR JOB='TESTER' AND (DNO=110 OR DNO=112) AND (SAL>30000 AND SAL<50000);

OR

SELECT FNAME,LNAME,DOB,DOJ,JOB,DNO,SAL
FROM EMP
WHERE (JOB IN('ALESMAN','DEVELOPER','TESTER')AND (DNO IN (110.111,112)AND(SAL>30000 AND SAL<500000);//USING IN OPERATOR

30. WAQTD THE DETAILS OF EMP WHO ARE WORKING AS DISPATCHER OR SALESMAN IN DEPT 110 OR 112 BUT NOT FEMALE.
SELECT*
FROM EMP
WHERE JOB IN ('SALESMAN','DISPATCHER') AND DNO IN (110,112) AND GENDER!='F'; 

31.WAQTD THE DISPLAY FNAME,LNAME,AND DOJ FROM THE EMP IF THE EMP WAS HIRED DURING THE YEAR 2021.
SELECT FNAME ,LNAME,DOJ
FROM EMP
WHERE DOJ>=2021-01-01'AND DOJ<='2021-12-31';

BETWEEN operator will include the range value.
syntax:
column name BETWEE/NOT BETWEEN lower rang AND higher_rang


33. WAQTD THE FNAME,LANME,DOB,DOJ AND AND SALARY IF THE EMP IS GETTING SALARY MORE THAN 30000 AND LESS THAN 45000.
>SELECT FNMAE,LNMAE,DOB,DOJ
FROM EMP
WHERE SAL>30000 AND  SAL>450000;
OR 
SELECT FNAME.LNAME,DOB.DOJ
FROM EMP
WHERE SAL BETWEEN 30000.01 AND 44999.99;

34. WAQTD THE DETAILS OF EMP WHO ARE NOT GETTING THE SALARY IN THE RANGE OF 30000 AND 45000.
SELECT*
FROM EMP
WHERE SAL NOT BETWEEN 30000 AND 450000;


35.
WAQTD THE DETAILS OF EMP WHO ALSO THE CUSTOMERS OF THAT PARTICULAR COMPANY.
SELECT*
FROM EMP
WHERE   CID IS NOT NULL;

is operator
______________

is operator is used to check whether the given condition is null/not null.
syntax: column_name ids null/not null;

36. WAQTD THE EMP FNAME,LNAME,SAL,COMM IF THE EMP IS GETTING ANY COMM.
>SELECT FNAME,SAL,COMM
FROM EMP
WHERE COMM IS NOT NULL;

37. WAQTD THE DETAILS OF EMP WHO DOESNOT HAVE ANY REPORTING MANAGER.
SELECT*2. 
FROM EMP
WHERE MGR ID NULL;

38. WAQTD THE DETAILS OF EMP WHO ARE WORKING AS SALESMAN,MANAGER, DEVELOPER OR DISPATCHER IN DEPT 110 OR 111 OR 112 BUT NOT GETTING SALARY IN THE RANGE OF 40000 TO  50000 AND  ALSO HE MUST BOT GET ANY COMM.

SELECT*
FROM EMP
WHERE JOB IN('SALESMAN','DEVELOPER','MANAGER','DISPATCHER') AND DNO IN(110,111,112) AND SAL NOT BETWEEN 40000 AND 50000 AND COMM ID NULL;

39. WQTD THE  DETAILS OF EMP WHOSE NAME STARTS WITH S.
SELECT*
FROM EMP
WHERE NAME

62. waqtd THE MAXIMUM AND MINIMUM SALARY GIVEN TO EACH JOB ROLE.
SELECT MAX(SAL),MIN(SAL),JOB
FROM EMP
GROUP BY JOB;

63.WAQTD THE TOTAL SALARY SPENT BY THE COMPANY TO EVERY JOB ROLE IF JOB ROLE IS SALESMAN OR MANAGER OR DEVELOPRE?
 SELECT SUM(SAL),JOB
 FROM EMP 
WHERE JOB IN ('SALESMAN','MANAGER','DEVELOPER')
GROUP BY JOB;

64.WAQTD THE NUMBER OF EMPS WORKING IN EACH IF THE EMP IS GETTING SALARY MORE THAN 35000.
SELECT COUNT(*),DNO
FROM EMP
WHERE SAL>35000
GROUP BY DNO;

65.WAQTD THE NUMBER OF EMPS WORKING IN EACH WHO ARE GETTING SALARY MORE THAN 32000 AND LESS THAN 50000.
SELECT COUNT (*)DNO
FROM EMP
WHERE SAL>32000 AND SAL<50000
GROUP BY DNO;

66.WAQTD THE NUMBER OF EMPS WHO ARE GETTING SALARY MORE THAN 35000 AND MAX SALARY LASS THAN 150000 IN EACH DEPT.
SELECT COUNT(*).DNO
FROM EMP
WHERE SAL>35000 
GROUP BY DNO
HAVING MAX(SAL)<150000;

HAVING CLAUSE
_________________
IT IS USED TO FILTER THE GROUP RECORDS.

SYNTAX:
_______
SELECT AGGREGATE_FUNCTIONS/GROUP_BY_EXPRESSIONS
FROM TABLE_NAME
[WHERE FILTER_CONDITION]
GROUP BY COLUMN_NAME
HAVING FILTER_GROUP_CONDTIION;

CHARACTERISTICS OF HAVING CLAUSE
_______________________________
>HAVING CLAUSE EXECUTES GROUP BY GROUP.
>HAING CLAUSE EXECUTES AFTER GROIP BY CLAUSE.
>WE CAN PASS MULTIPLE GROUP CONDITION INSIDE HAVING CLASUSE.
>FOR EXECUTION OF HAVING CLAUSE,GROUP BY IS MANDATORY.

67. WAQTD THE AVG SALARY AND TOTAL SALARY IN EACH DEPT IF THE AVG SALARY OF THE DEPT IS MORE THAN 40000.
>SELECT AVG(SAL),SUM(SAL),DNO
FROM EMP
GROUP BY DNO
HAVING AVG(SAL)>40000;

68.WAQTD THE TOTAL SALARY AND NO.OF EMP'S WORKING IN EACH JOB ROLE IF THERE ARE MORETHAN 2 EMPS WORKING IN RAHC JOB ROLE.
>SELECT SUM(SAL),COUNT(*),JOB
FROM EMP
GROUP BY JOB
HAVING COUNT(*)>2;

69. WQTD THE MAXIMUM SALARY MINIMUM SALARY IN EA
>SELECT MAX(SAL),MIN(SAL),DNO
FROM EMP
WHERE SAL>32000
GROUP BY DAO
HAVING MIN(SAL)>30000 AND MAX(SAL),AVG(SAL),DNO
FROM EMP
GROUP BY JOB
HAVING MIX(SAL)>30000 AND MAX(SAL)<500000;

71. wqtd THE NO.OF EMP'S WHO AGE GETTING SAME SALARY.
>SELECT COUNT(*)
FROM EMP
GROUP BY SAL
HAVAING COUNT(*)>1;

72. WQTD THE NO OF EMPS WHO ARE WORKING IN SAME DEPT AND GETTNG SAME SALARY.
>SELECT COUNT(*)
FROM EMP
GROUP BY SAL,DNO
HAVAING COUNT(*)>1;

73. wqtd the no of emps repoting to each mangers.
SELECT COUNT(*),mgr
FROM EMP
WHERE MGR IS NOT NULL
GROUP BY MGR;

74. WQTD THE NO EMPS HAVING SAME GENDER AND WORKING IN SAME DEPT.
>SELECT COUNT(*),GENDER,DNO
FROM EMP
GROUP BY GENDER DNO
HAVING COUNT(*)>1;

75. WQTD THE DETAILS OF EMP ACCORDING TO THE SALARY FROMMAX TO MIN.
>SELECT COUNT(*)
FROM EMP
ORDER BY SAL DESE;



ORDER BY
_________
order by is used to arrange the  records either in ascending or descending order.

syntax
______

SELECT column_name
FROM teble_name
PRDER BY column_name ASC DESC;

characteristics of ORDER BY CLAUSE:
___________________________________

>it is the last exeution clause.
>it  execoutes after the select clause.
>Normally, the records in the  table will be arranged according to the primary key.
>we can pass multiple columns inside the order by clause.


nature of execution
___________________

FROM
WHERE->row by row
GROUP BY->row by row
HAVING->group by group
SELECT 
ORDER BY

76.WQTD THE MEP FIRST NAME,LAST NAME AND JOB IF THE EMP IS WORKINF AS SALESMAN OR MANA
SELECT FNAME,LNAME,JOB
FROM EMP
WHERE JOB IN ('SALESMAAN','MANAGER')
ORDER BY FNMAE ASC;

77. WQTD THE NO OF EMPS WHO ARE GETTING SAME SALARY AND WORKING IN SAL IS MORE THAN 30000.ARRANGE THE RECORD BNASED ON THIER SAL.
>SELECT COUNT(*),SAL,JOB
FROM EMP
WHERE SAL>30000
GROUP BY SAL,JOB
HAVING COUNT(*)>1
ORDER BY SAL DESC;

78. WQTD THE FIRST 3 RECORDS FROM THE EMP TABLE.
>SELECT *
FROM EMP
LIMIT3;

LIMITS AND OFFSET;
__________________

LIMIT: limit is used to return the specified no of records
OFFSET:it is used to ignore the specified number of records.

79.wqtd THE FIRST 5 RECORDS.
SELETC *
FROM EMP
LIMI 1;

80. WQTD THE SECOND RECORD.
SELECT*
FROM EMP
LIMIT 5;

81. WQTD THE SECOND  RECORD.
>SELECT*
FROM EMP 
LIMIT 1 OFFSET 1;

82. WQTD THE 5TH AND 6TH RECORD.
SELETC*
FROM EMP
LIMIT 2 OFFSET 4;

83.WQTD THE TOP 5 MAXIMUM SALARY HOLDERS.
>SELECT*
FROM EMP
ORDER BY SAL DESC
LIMIT 5;

84.WQTD THE LAST 5 RECODERS.
SELECT*
FROM EMP
ORDER BY EID DESC
LIMIT 5;

85. WQTD THE 3RO MAXIMUM SALARY.
SELECT SAL
FROM EMP
ORDER BY SAL DESC
LIMIT 1 OFFSET 2;

86. WQTD THE 6TH MAXIMUM SALARY.
>SELECT SAL
FROM EMP
ORDER BY SAL DESC
LIMIT 1 OFFSET 5;

87.WQTD THE 7TH MAXIMUM SALARY.
SELECT DISTINCT SAL
FROM EMP
ORDER BY SAL DESC
LIMIT 1 OFFSET 6;

88.WQTD THE 5TH MINIMUM SALARY.
>SELECT DISTINCT SAL
FROM EMP
ORDER BY SAL DESC 
LIMIT 1 OFFSET 4;

89.WQTD THE 4TH MINOMUM SALARY.
>SELECT DISTINCT SAL
FROM EMP
ORDER BY SAL ASC
LIMIT 1 OFFSET 3;

Character functions
____________________
1  UPPER(): this function is used to convert the string values to UPPER case.
SYNTAX: SELECT UPPER ('pentagon');

2 LOWER(): this function is used to convert the string values to lower case.
SYNTAX: SELECT LOWER('pentagon');

3 LENGTH(); This function is used to obtain the length of the given string.
SYNTAX: SELECT LENGTH('pentagon')

4.REVERSE():This function is used to reverse the given string.
syntax: SELECT REVERSE('pentagon');

5.CONCAT():This function is used to  combine the given string.
syntax: CONCAT('str1','str,str,str

90. wqtd thE FIRST NAME AND LAST NAME OF THE EMP TOGETHER IN A SINGLE COLUMN.
>SELECT CONCAT(FNAME,' ',LNAME) FULL_NAME
FROM EMP;

91. WQTD THE DETAILS OF EMP WHOSE FNAME STARTS WITH S WITHOUT USING LIKE OPERATOR.
> SELECT*
FROM EMP
WHERE SUBSTR(SUBSTR,1,1)='S';

92.WQTD THE FNAME,LNAME EMP IF THE FNMAE ENDS WITH R.
>SELECT FNAME,LNAME
FROMM EMP
WHERE SUBSTR(FNAME,-1,1)='R';

93. WQTD THE FNAME EROM EMP IF EMP FNMAE STARTS WITH S OR A.
>SELECT FNAME,LNAME
FROM EMP
WHERE SUBSTR(FNAME,-1,1)='R';


94.WQTD THE FNAME EROM EMP IF THE EMP FNMAE STARTS WITH VOWELS.
SELECT FNAME
FROM EMP
WHERE SUBSTR(NAME,1,1)='A'OR
SUBSTR(NAME,1,1)='E' OR
SUBSTR(NAME,1,1)='I' ORSUBSTR(NAME,1,1)='O' OR
SUBSTR(NAME,1,1)='U';
OR
>SELECT 
95.WQTD THE FNAME,LNAME IF THE EMP FNMAE ENDS WITH VOWELS.
>SELECT FNMAE,LNAME
FROM EMP
WHERE SUBSTR(FNAME,-1,1)IN('A','E','I','O','U')

96.WQTD THE FNAME,LNAME IF THE EMP IF EMP FNMAE STARTS WITH VOWELS OR LNAME ENDS WITH VOWELS.
SELECT FNMAE,LNAME
FROM EMP
WHERE SUBSTR(FNAME,-1,1)IN('A','E','I','O','U')OR
SUBSTR (LNAME,-1-1)IN('A','E','I','O','U');

97.WQTD THE  DETAILS OF EMP WHO WERE BORN DURING THE YEAR 1995.
>HINT: 'Y Y Y Y - M M - D D'
      '1 2 3 4 5 6 7 8 9 10 
> SELECT *
FROM EMP
WHERE SUBSTR(DOB,1,4)=1995;

98. WQTD THE DETAILS OF WHO WERE IN MONTH OF JUN,JUL,AUG.
HINT: 'Y Y Y Y - M M - D D'wqtd the firt hawqtd 
      '1 2 3 4 5 6 7 8 9 10 
>SELECT *
FROM EMP
WHERE SUBSTR(DOJ,6,2)IN(06,07,08);

99. WQTD THE FIRST HALF OF THE NAME.
> SELECT SUBSTR(FNAME,1,LENGTH(FNAME)/2)
FROM EMP;

100.wqtd THE SECOND HALF OF THE NAME.
>SELECT SUBSTR(FNAME,LENGTH(FNAME/2)+1)
FROM EMP;

101.WQTD THE FIRT HALF OF FNAME IN LOWER CASE AND SECOND HALF OF FIRST NAME IN REVERSE CASE.
SELECT SUBSTR(LOWER(
FROM EMPFNAME,1,LENGTH(FNAME)/2))REVERSE(

REPLACE(0
_________
this function is used to substritute the sub string with a new string from the original string.

syntax
_____
REPLACE(Original_string,sub_str,new_str);

SELECT REPLACE('PENTAGON','A','S');

SELECT REPLACE('PENTAGON','N','007');

SELECT REPLACE('PANTAGON','N','');

Input-1  Input-2   Output
__________________________

RANGA     A          2
MALAYALAM A          4
 
To check the number of A's inside the word 'MALYALAM':
SELECT LENGTH('MALYALAM')-LENGTH(REPLACE('MALYALAM','A',''));



102. WQTD THE FNAME WHOSE NAME CONSTAINS ATLEAST 1E IT WITHOUT USING LIKE OPERATOR.
>SELECT FNAME
FROM EMP
WHERE LENGTH(FNAME)-LENGTH(REPLACE(FNAME,'E',''))>=1;

103.WQTD THE EMP FNAME WHOSE NAME CONTAINS ATLEAST 2 A IT WITHOUT USING LIKE OPERATOR.
>SELECT FNMAE
FROM EMP
WHERE LENGTH(FNAME)-LENGTH(REPLACE(FNAME,'A',''))>=2;

NUMBER FUNCTIONS;
_______________
ABS():This functions is used to convert the negative numbers into positive numbers.
syntax: ABS(m);
Ex: select ABS(-20);

MOD(): This functions is used to obtain the remainder of the given two numbers.
syntax:' MOD(m,n);
Ex.SELECT mod(4,2);

ROUND();This functions is used to round off the given floating values.
syntax: ROUND(m.n);
Ex: select ROUND(4,79);

CETL():This functions is used to obtain next integer value from the given decimal number.

FLOOR(); This function is used to obtain the current value from the given decimal number.

POW(): This functions IS  used to obtain the power of the given two number. it takes the integer value and the degree value as a argument.
Ex SELECT POW(3,4);

DATE FUNCTIONS:
_______________


SYSDATE(): This functions is used to obtain the current date and time.
syntax: SELECT SYSDATE();

CURDATE();This functions is used to obtain the current date.
syntax: SELECT CURRENT_DATE();

DATEDTFF(): This function is used to obtain the difference between two dates.
syntax: SELECT DATEDIFF(CURDATE(),'2023-08-03');

DATEADD(): This functions is used to add the date value.
syntax: SELECT DATE_ADD(sysdate(),INTERVAL 2 MONTH);

INTERVAL:THIS FUNCTION IS USED TO PASS THE TIME INTRVAL FOR THE GIVEN DATE VALUE.

DATE_FORMAT(): this function is used to convert the date function into individual characters.

Syntax: SELECT DATE_FORMAT(SYSDATE(),'%Y');



DATEADD() This function is used to ob
 SELECT CEIL(-28.99);
+--------------+
| CEIL(-28.99) |
+--------------+
|          -28 |
+--------------+
1 row in set (0.01 sec)

mysql> SELECT FLOOR(-28.99);
+---------------+
| FLOOR(-28.99) |
+---------------+
|           -29 |
+---------------+
1 row in set (0.00 sec)

>.SELECT ABS(CEIL(-28.5));
+------------------+
| ABS(CEIL(-28.5)) |
+------------------+
|               28 |
+------------------+
1 row in set (0.01 sec)



105.wqtd THE DETAILS OF EMP WERE HIRED IN THE YEAR 2016.
SELECT*
FROM EMP
WHERE DATE_FORMAT(DOJ,'%Y')=2016;

106. WAQTD THE FNAME,LNAME,DOB IF WERE BORN IN THE MONTH OF DEC,JAN R FEB USING DATE_FROMAT  FUNCTION.
SELECT FNAME,LNAME,DOB
FROM EMPWHERE DATE_FORMAT(DOB,'%m')IN(12,01,02);

107.wqtd the details of emp who were hired on Saturday or sunday.
SELECT*
FROM EMP
WHERE DATE_FORMAT(DOJ,'%a')IN('SAT','SUN');

108. WQTD THE EMP FNAME,DOB IN US FORMAT.US MM/DD/YYYY
SELECT FNAME,DATE_FORMAT(DOB,'%m/%d/%y') DATE_OF_BIRTH
FROM EMP;

109. WQTD THE NUMBER OF EMPS HIRED EACH YEAR.DISPLAY THE NUMBERS MAXMBERS FROM MAXIMUM TO MINIMUM ACCORDING TO THEIR COUNT.
SELECT COUNT(*),DATE_FORMAT(DOJ,'%Y') YEAR_OF_JOINING
FROM EMP
GROUP BY DATE_FORMAT(DOJ,'%Y')
ORDER BY COUNT(*) DESC;

110.WQTD THE DETAILS OF EMP WHO WERE HIRED DURING THE LEAP YEAR.
SELECT*
FROM EMP
WHERE MOD(DATE_FORMAT(DOJ,'%Y'),4)=0;

111. WQTD THE CURRENT EXPERIENCE OF ALL THE EMPS.

SELECT FNAME,DATE_FORMAT(CURRENT_DATE(),'%Y,%m')-DATE_FORMAT(DOJ,'%Y,%m') CURRENT_EXPERIENCE
FROM EMP;

SUBQUERY
________

>sub query consisting of inner query and outer query.
>in subquery of the inner will execute first and generates the output.
>the output of the inner query will be given as input to outer query.
>the output query will collect the input and executes completely for the final result.
>here outer query depends upon the inner query for the output.

when and where to go for sub query?
___________________________________

Case1: whenever we come across unknown value, we go for subquery.
Rules to write subquery
________________________
1.WHERE SAL>(SELECT FNAME -wrong
decimal != varchar





112.WQTD THE DETAILS OF EMP WHO ARE GETTING SALARY MORE THAN KIRAN.

SELECT SAL FROM EMP WHERE SAL>
(SELECT SAL FROM EMP WHERE FNAME='KIRAN');

113. WQTD THE EMP FNAME,SAL,JOB FROM EMP IF THE EMP IS WORKING IN THE SAME JOB ROLE AS AMAN'S JOB ROLE.
SELECT FNAME,LNAME,SAL,JOB FROM EMP WHERE JOB=
(SELECT JOB FROM EMP WHERE FNAME='AMAN');

114. WAQTD THE DETAILS OF EMP WHO WERE HIRED AFTER SAMEER.
SELECT* FROM EMP WHERE DOJ>
(SELECT DOJ FROM EMP WHERE FNAME='SAMEER');

115. WWQTD THE FNAME,LNAME,SAL,JOB IF THE EMP IS WORKING AS AND GETTING SALARY MORE THAN DHARANI'S SALARY.
>SELECT FNAME,LNAME,SAL,JOB FROM EMP WHERE JOB='SALESMAS' AND SAL>
(SELECT SAL FROM EMP WHERE FNAME='DHARANI');

116. WQTD THE DETAILS OF EMP WHO ARE WORKING IN SAME DEPT AS SIDDARTH'S DEPT AND GETTING SALARY MORE THAN PRIYA.




126. WQTD THE DNAME OF THE EMP WHO ARE WORKING IN THE SAME JOB ROLE AS KARAN"S JOB ROLE?
> SELECT DNO FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE JOB IN
(SELECT JOB FROM EMP WHERE FNAME='KARAN'));

127. WQTD THE LOCATION,CITY AND STATE OF MARKETING DEPT?
> SELECT LOCATION,CITY,STATE FROM LOCATION WHERE LID IN
SELECT LID FROM DEPT
WHERE DEPT ='MARKETING';

ALTER TABLE CUSTOMER
DROP COLUMN PRODUCT_ID;

ALTER TABLE ORDERS
ADD CID INT;

ALTER TABLE CUSTOMER
DROP COLUMN ORDER_ID;

UPDATE ORDERS SET CID=501 WHERE ORDER_ID=1201;

UPDATE ORDERS SET CID=501 WHERE ORDER_ID=1127;

UPDATE ORDERS SET CID=507 WHERE ORDER_ID=1127;

UPDATE ORDERS SET CID=511 WHERE ORDER_ID=1773;

UPDATE ORDERS SET CID=505 WHERE ORDER_ID=1111;



128. WQTD THE DETAILS OF EMP WHO LIVES IN MUMBAI?
>SELECT * FROM CUSTOMER WHERE LID IN
(SELECT LID FROM LOCATION WHERE CITY = 'MUMBAI');

129. WQTD THE WORKING LOCATION OF MURALI FROM TABLE?
>SELECT DNAME FROM LOCATION WHERE LID IN
(SELECT LID FROM LOCATION
WHERE FNAME='MURALI');

[OR]

SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE FNAME='MURALI'));

130. WQTD THE LOCATION OF EMP WHO ARE ALSO THE CUSTOMERS.
note: (DON'T USE DEPT TABLE)

SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM CUSTOMER WHERE CID IN
(SELECT CID FROM EMP WHERE CID IS NOT NULL));

131. WQTD THE LOCATION OF CUSTOMER WHO HAVE ORDERED ANY PRODUCT?
> SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT PRODUCT FROM LOCATION WHERE CID IN
(SELECT CID FROM CUSTOMER WHERE PID IS NOT NULL));

SELECT * FROM EMP WHERE CID IN
(SELECT CID FROM ORDERS);

132. WQTD THE EMP DETAILS WHO HAS DELIVERED THE PRODUCT TO MUMBAI CITY?
>SELECT * FROM EMP WHERE EID IN
(SELECT EID FROM ORDERS WHERE CID IN
(SELECT CID FROM CUSTOMER WHERE LID IN
(SELECT LID FROM LOCATION WHERE CITY='MUMBAI')));

133. WQTD THE DETAILS OF EMPS WHO ARE WORKING IN VIJAYNAGAR.
>SELECT * FROM EMP WHERE DNO IN
(SELECT DNO FROM DEPT WHERE LID IN
(SELECT LID FROM LOCATION WHERE LOCATION='VIJAYNAGAR'));

134. WQTD THE DETAILS OF EMP WHO ARE GETTING SALARY MORE THAN KIRAN?
> SELECT * FROM EMP WHERE SAL>
(SELECT SAL FROM EMP WHERE FNAME='KIRAN');

135. WQTD THE DETAILS OF EMP WHO ARE GETTING SAL MORE THAN ALL SALESMAN.
>SELECT * FROM EMP WHERE SAL>
(SELECT SAL FROM EMP WHERE JOB='SALESMAN');

ALL/ANY OPERATOR:
_________________
 These are multi values operators which takes single values at LHS and multiple values at RHS.
Syntax: column_name </> ALL/ANY (v1,v2,....);

> ALL operator works in the form of AND operator.
> ANY operator works in the form of OR operator.

136. WQTD THE DETAILS IF EMP WHO ARE GETTING SALARY MORE THAN ANY OF SALESMAN?
> SELECT * FROM EMP WHERE SAL>
ANY(SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN');
[OR]
SELECT * FROM EMP WHERE SAL>
(SELECT MAX(SAL) FROM EMP WHERE JOB='SALESMAN');

137. WQTD THE DETAILS OF EMP WHO ARE HIRED AFTER 2 YEARS OF JOINING OF SAMEER?
> SELECT * FROM EMP WHERE DOJ>
ALL(SELECT DATE_ADD(DOJ, INTERVAL 2 YEAR) FROM EMP WHERE FNAME='SAMEER');

138. WQTD THE DETAILS OF KIRAN'S MANAGER?
> SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='KIRAN');

139. WQTD THE FULL NAME OF DHARANI'S MANAGER?
> SELECT CONCAT(FNAME,' ',LNAME) "FULL_NAME" FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='DHARANI');

140. WQTD THE DEPT NAME OF HEMA'S MANAGER?
>SELECT DNAME FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE EID IN(SELECT MGR FROM EMP WHERE FNAME='HEMA'));

141. WQTD THE NUMBER OF EMP HIRED IN THE SAME MONTH?
> SELECT COUNT(*), DATE_FORMAT(DOJ,'%M')"MONTH_OF_HIRING" 
FROM EMP
GROUP BY DATE_FORMAT(DOJ,'%M') HAVING COUNT(*)>1;

142. WQTD THE WORKING LOCATION OF SAMEER'S MANAGER.
>SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM DEPT WHERE DNO IN
(SELECT MGR FROM EMP WHERE FNAME='SAMEER'));

143. WQTD THE DETAILS OF FARIYA'S MANAGER'S MANAGER.
> SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='FARIYA'));

144. WQTD THE DETAILS OF EMP WHO ARE REPORTING TO SIDDARTH.
> SELECT * FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='SIDDARTH');

145. WQTD THE FNAME,LNAME OF THE EMP WHO ARE REPORTING TO RAHUL.
>SELECT FNAME,LNAME FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='RAHUL');

146. WQTD THE DEPT NAME OF THE EP WHO ARE REPORTIG TO HEMA.
>SELECT DNAME FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='HEMA'));

147. WQTD THE DETAILS OF EMP WHO ARE REPORTING TO KIRAN'S MANAGER.
> SELECT * FROM EMP WHERE MGR IN
(SELECT MGR FROM EMP WHERE FNAME='KIRAN'));

148. WQTD THE NUMBER OF EMPS REPORTING TO SAMEER.
> SELECT COUNT(*) FROM EMP WHERE MGR IN
(SELECT MGR FROM EMP WHERE FNAME='SAMEER');

149. WQTD THE DETAILS OF MANAGER WHERE ATLEAST 4 EMPS MUST BE REPORTING TO HIM.
>SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP
GROUP BY MGR HAVING COUNT(*)>=4);
  
150. WQTD THE FNAME, LNAME OF MANAGER WHERE THE REPORTING ARE BETWEEN 4 AND 6.
> SELECT FNAME,LNAME FROM EMP WHERE EID IN
(SELECT MGR FROM EMP
GROUP BY MGR HAVING COUNT(*) BETWEEN 4 AND 6);

151. WQTD THE DETAILS OF EMP WHO ARE GETTING FIRST MAX SALARY.
> SELECT * FROM EMP WHERE SAL IN
(SELECT MAX(SAL) FROM EMP);

152. WQTD THE DETAILS OF EMP WHO ARE GETTING 6TH MAX SALARY.
> SELECT * FROM EMP WHERE SAL=
(SELECT DISTINCT SAL FROM EMP 
ORDER BY SAL DESC
LIMIT 1 OFFSET 5);

153. WQTD THE DETAILS OF EMP WHO ARE GETTING 5TH MIN SAL.
> SELECT * FROM EMP WHERE SAL=
(SELECT DISTINCT SAL FROM EMP
ORDER BY SAL ASC
LIMIT 1 OFFSET 4);

154. WQTD THE DETAILS OF FIRST 5 MAX SALARY HOLDERS.
>SELECT SAL FROM 
(SELECT DISTINCT SAL FROM EMP
 ORDER BY SAL DESC
 LIMIT 5) RESULT;

155. WQTD THE DETAILS OF EMP WHO ARE GETTING SALARY MORE THAN AVG SALARY OF DEPT 113.
>SELECT * FROM EMP WHERE SAL>
(SELECT AVG(SAL) FROM EMP WHERE DNO=113);

156. WQTD THE DETAILS OF EMP WHO ARE GETTING SAL MORE THAN AVG SALARY OF HIS DEPT.
>SELECT * FROM EMP E1 WHERE SAL>
(SELECT AVG(SAL) FROM EMP WHERE DNO=E1.DNO);

157. WQTD THE DETAILS OF EMP WHO ARE ELDER THAN THEIR REPORTING MANAGERS.
>SELECT * FROM EMP E1 WHERE DOB<
(SELECT DOB FROM EMP WHERE EID=E1.MGR);

158. WQTD HE DETAILS OF EMP WHERE THE MANAGER AND EMPLOYEE HAVE SAME GENDER.
>SELECT * FROM EMP E1 WHERE GENDER IN
(SELECT GENDER FROM EMP WHERE EID=E1.MGR);

Drawbacks of sub query:
=======================
> We cannot get the data from multiple tables.
> We cannot display the data from multiple tables.
> Very complex to solve corelated sub queries.

JOINS:
______
It is used to retrieve the data from multiple tables simultaneously.

Types of JOINS:
================
1. Cartesian Joins or Cross Joins (Deprecated).
2. Inner Join ***
3. Self Join ***
4. Outer Join ***
   > LEFT Outer Join
   > RIGHT Outer Join
   > FULL Outer Join
5. Natural Joins (Deprecated)

Cartesian Join or Cross Join:
=============================
In cartesian join, The records of table 1 will be merged with records of table 2.

In cross join,
> The number of columns generated:
> The number of rows generated:

Syntax:
________
SELECT column_name
FROM table_name1 CROSS JOIN table_name2;

select * 
from emp cross join dept;

INNER JOIN:
===========
It is used to obtain the matched records.

Syntax: SELECT column_name
FROM table_name_1 INNER JOIN table_name_2
ON table_name_1.column_name=table_name_2.column_name;


159. WQTD THE EMP FNAME AND HIS DEPT NAME.
>SELECT FNAME,DNAME
 FROM EMP INNER JOIN DEPT
 ON EMP.DNO=DEPT.DNO;

160. WQTD CUSTOMER FNAME AND HIS LOCATION,CITY,STATE.
>SELECT FNAME,LOCATION,CITY,STATE
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID;

161. WQTD THE EMP FNAME,LNAME WHO HAS DELIVERED THE PRODUCT.
>SELECT DISTINCT FNAME,LNAME 
FROM EMP E1 INNER JOIN ORDERS O1
ON E1.EID=O1.EID;

162. WQTD EMP FNAME,LNAME,JOB,DNAME IF THE EMP IS WORKING HAS SALESMAN OR MANAGER.
>SELECT FNAME,LNAME,JOB,DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE JOB IN('SALESMAN','MANAGER');

163. WQTD EMP FNAME,LNAME,DNO,DNAME.
>SELECT E1.FNAME,E1.LNAME,E1.DNO,D1.DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO;

164. WQTD THE EMP FNAME,DNAME IF THE EMP IS WORKING IN HR DEPT.
>SELECT E1.FNAME,D1.DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE D1.DNAME='HR';

165. WQTD CUSTOMER FNAME,LOCATION AND CITY IF THE CUSTOMER BELONGS TO MUMBAI.
>SELECT C1.FNAME,L1.LOCATION,CITY
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID
WHERE L1.CITY='MUMBAI';

166. WQTD THE CUSTOMER FNAME AND PRODUCT NAME IF THE CUSTOMER HAS ORDERED ANY PRODUCT.
>SELECT *
FROM CUSTOMER C1 INNER JOIN ORDERS O1
ON C1.CID=O1.CID INNER  JOIN PRODUCT P1
ON O1.PRODUCT_ID=P1.PRODUCT_ID;

167. WQTD THE EMP FNAME,DNAME AND HIS WORKING LOCATION.
>SELECT E1.FNAME,E1.LNAME,D1.DNAME,L1.LOCATION
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO INNER JOIN LOCATION L1
ON L1.LID=D1.LID;

168. WQTD THE CUSTOMER FNAME,ORDER ID, DELIVERY DATE, PNAME,PRICE AS TOTAL_BILL,LOCATION,CITY AND STATE.
>
153. WQTD THE DETAILS OF EMP WHO ARE GETTING 5TH MIN SAL.
SELECT *FROM EMP WHERE SAL=
    -> (SELECT DISTINCT  SAL
    -> FROM EMP
    -> ORDER BY SAL ASC
    -> LIMIT 1 OFFSET 4);


Drawbacks of sub query:
++++++++++++++++++++++
>we cannot get the date from multiple tables.
>we cannot display the data from multiple tables.
>very complex to solve corelated sub queries.

JOINS:
=====
It is used to retrieve  the date from multiple tables simultaneously.

Types of JOINS:
==============
1. Cartesian Joins or cross joins (Deprecated),
2. Inner join ***
3. self join ***
4.outer join ***
  > LEFT OUTER join
  > RIGHT Outer join
  >FULL Outer join
5. Natural join (Deprecated)

Cartesian join or cross join:
__________________________
In cartesian join, the records of table 1 will be merged with records of table 2.

In cross join,
 >the number of columns generated;
 >the number of rows generated;

Syntax
______

SELECT column_nmae
FROM table_name1 CROSS JOIN table_name2;

SELECT *
FROM EMP CROSS JOIN DEPT;

INNER JOIN:
__________

It is used to obtain the matched records.

159. wqtd THE EMP FNAME AND HIS DEPT NAME.
>SELECT FNAME,DNAME
 FROM EMP INNER JOIN DEPT 
ON EMP.DNO=DEPT,DNO; 

160.WQTD CUSTOMER FNAME AND HIS LOCATION,CITY,STATE
>SELECT FIRST_NAME,LOCATION,CITY,STATE
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID;

161. WQTD THE EMP FNAME,LAST NAME WHO HAS DELIVERED THE PRODUCT.
SELECT DISTINCT FNMAE,LNAME
FROM EMP E1 INNER JOIN ORDERS 01
ON E1.EID=O1.EID;

162. WQTD THE EMP FIRST NAME,LNAME. JOB,DEPT NMAE IF THE EMP IS WORKING AS SALESMAN OR MANAGER.
>SELECT FNAME,LNAME,JOB,DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE JOB IN('SALESMAN','MANAGER');

163.WQTD THE EMP FNMAE,LNAME,DNO,DNAME.

SELECT E1.FNAME,E1.LNMAE,E1.DNO,D1.DNMAE
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO;

164. WQTD THE EMP FNMAE,DEPT NMAE IF THE EMP IS WORKING IN HR DEPT.
>SELECT E1.FNAME,D1.DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE D1.DNAME='HR';

165. WQTD THE CUSTOMER FNMAE,LOCATION AND CITY IF THE CUSTOMER BELONGS TO MUMBAI.
SELECT C1.FNAME,L1.LOCATION,L1.CITY
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID
WHERE L1.CITY='MUMBAI';

166.WQTD THE CUSTOMER FIRST NAME AND THE PRODUCT NAME IF THE CUSTOMER HAS ORDERED ANY PRODUCT.
>SELECT*
FROM CUSTOMER C1 INNER JOIN ORDERS 01
ON C1.CID=O1.CID INNER JOIN PRODUCT P1
ON O1.PRODUCT_ID=P1.PRODUCT_ID;

167.WQTD THE EMP FNMAE,DNAME AND HIS WORKING LOCATION.
SELECT E1.FNAME,D1.DNAME,L1.LOCATION
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO INNER JOIN LOCATION L1
ON L1.LID=D1.LID;

168.WQTD THE CUSTOMER FIRST NAME,ORDER ID,DELIVERY DATE,PNMAE,PRICT AS TOTAL_BILL,LOCATION,CITY AND STATE.
>SELECT C1.FNAME,
126. WQTD THE DNAME OF THE EMP WHO ARE WORKING IN THE SAME JOB ROLE AS KARAN"S JOB ROLE?
> SELECT DNO FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE JOB IN
(SELECT JOB FROM EMP WHERE FNAME='KARAN'));

127. WQTD THE LOCATION,CITY AND STATE OF MARKETING DEPT?
> SELECT LOCATION,CITY,STATE FROM LOCATION WHERE LID IN
SELECT LID FROM DEPT
WHERE DEPT ='MARKETING';

ALTER TABLE CUSTOMER
DROP COLUMN PRODUCT_ID;

ALTER TABLE ORDERS
ADD CID INT;

ALTER TABLE CUSTOMER
DROP COLUMN ORDER_ID;

UPDATE ORDERS SET CID=501 WHERE ORDER_ID=1201;

UPDATE ORDERS SET CID=501 WHERE ORDER_ID=1127;

UPDATE ORDERS SET CID=507 WHERE ORDER_ID=1127;

UPDATE ORDERS SET CID=511 WHERE ORDER_ID=1773;

UPDATE ORDERS SET CID=505 WHERE ORDER_ID=1111;

128. WQTD THE DETAILS OF EMP WHO LIVES IN MUMBAI?
>SELECT * FROM CUSTOMER WHERE LID IN
(SELECT LID FROM LOCATION WHERE CITY = 'MUMBAI');

129. WQTD THE WORKING LOCATION OF MURALI FROM TABLE?
>SELECT DNAME FROM LOCATION WHERE LID IN
(SELECT LID FROM LOCATION
WHERE FNAME='MURALI');

[OR]

SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE FNAME='MURALI'));

130. WQTD THE LOCATION OF EMP WHO ARE ALSO THE CUSTOMERS.
note: (DON'T USE DEPT TABLE)

SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM CUSTOMER WHERE CID IN
(SELECT CID FROM EMP WHERE CID IS NOT NULL));

131. WQTD THE LOCATION OF CUSTOMER WHO HAVE ORDERED ANY PRODUCT?
> SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT PRODUCT FROM LOCATION WHERE CID IN
(SELECT CID FROM CUSTOMER WHERE PID IS NOT NULL));

SELECT * FROM EMP WHERE CID IN
(SELECT CID FROM ORDERS);

132. WQTD THE EMP DETAILS WHO HAS DELIVERED THE PRODUCT TO MUMBAI CITY?
>SELECT * FROM EMP WHERE EID IN
(SELECT EID FROM ORDERS WHERE CID IN
(SELECT CID FROM CUSTOMER WHERE LID IN
(SELECT LID FROM LOCATION WHERE CITY='MUMBAI')));

133. WQTD THE DETAILS OF EMPS WHO ARE WORKING IN VIJAYNAGAR.
>SELECT * FROM EMP WHERE DNO IN
(SELECT DNO FROM DEPT WHERE LID IN
(SELECT LID FROM LOCATION WHERE LOCATION='VIJAYNAGAR'));

134. WQTD THE DETAILS OF EMP WHO ARE GETTING SALARY MORE THAN KIRAN?
> SELECT * FROM EMP WHERE SAL>
(SELECT SAL FROM EMP WHERE FNAME='KIRAN');

135. WQTD THE DETAILS OF EMP WHO ARE GETTING SAL MORE THAN ALL SALESMAN.
>SELECT * FROM EMP WHERE SAL>
(SELECT SAL FROM EMP WHERE JOB='SALESMAN');

ALL/ANY OPERATOR:
_________________
 These are multi values operators which takes single values at LHS and multiple values at RHS.
Syntax: column_name </> ALL/ANY (v1,v2,....);

> ALL operator works in the form of AND operator.
> ANY operator works in the form of OR operator.

136. WQTD THE DETAILS IF EMP WHO ARE GETTING SALARY MORE THAN ANY OF SALESMAN?
> SELECT * FROM EMP WHERE SAL>
ANY(SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN');
[OR]
SELECT * FROM EMP WHERE SAL>
(SELECT MAX(SAL) FROM EMP WHERE JOB='SALESMAN');

137. WQTD THE DETAILS OF EMP WHO ARE HIRED AFTER 2 YEARS OF JOINING OF SAMEER?
> SELECT * FROM EMP WHERE DOJ>
ALL(SELECT DATE_ADD(DOJ, INTERVAL 2 YEAR) FROM EMP WHERE FNAME='SAMEER');

138. WQTD THE DETAILS OF KIRAN'S MANAGER?
> SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='KIRAN');

139. WQTD THE FULL NAME OF DHARANI'S MANAGER?
> SELECT CONCAT(FNAME,' ',LNAME) "FULL_NAME" FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='DHARANI');

140. WQTD THE DEPT NAME OF HEMA'S MANAGER?
>SELECT DNAME FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE EID IN(SELECT MGR FROM EMP WHERE FNAME='HEMA'));

141. WQTD THE NUMBER OF EMP HIRED IN THE SAME MONTH?
> SELECT COUNT(*), DATE_FORMAT(DOJ,'%M')"MONTH_OF_HIRING" 
FROM EMP
GROUP BY DATE_FORMAT(DOJ,'%M') HAVING COUNT(*)>1;

142. WQTD THE WORKING LOCATION OF SAMEER'S MANAGER.
>SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM DEPT WHERE DNO IN
(SELECT MGR FROM EMP WHERE FNAME='SAMEER'));

143. WQTD THE DETAILS OF FARIYA'S MANAGER'S MANAGER.
> SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='FARIYA'));

144. WQTD THE DETAILS OF EMP WHO ARE REPORTING TO SIDDARTH.
> SELECT * FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='SIDDARTH');

145. WQTD THE FNAME,LNAME OF THE EMP WHO ARE REPORTING TO RAHUL.
>SELECT FNAME,LNAME FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='RAHUL');

146. WQTD THE DEPT NAME OF THE EP WHO ARE REPORTIG TO HEMA.
>SELECT DNAME FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='HEMA'));

147. WQTD THE DETAILS OF EMP WHO ARE REPORTING TO KIRAN'S MANAGER.
> SELECT * FROM EMP WHERE MGR IN
(SELECT MGR FROM EMP WHERE FNAME='KIRAN'));

148. WQTD THE NUMBER OF EMPS REPORTING TO SAMEER.
> SELECT COUNT(*) FROM EMP WHERE MGR IN
(SELECT MGR FROM EMP WHERE FNAME='SAMEER');

149. WQTD THE DETAILS OF MANAGER WHERE ATLEAST 4 EMPS MUST BE REPORTING TO HIM.
>SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP
GROUP BY MGR HAVING COUNT(*)>=4);
  
150. WQTD THE FNAME, LNAME OF MANAGER WHERE THE REPORTING ARE BETWEEN 4 AND 6.
> SELECT FNAME,LNAME FROM EMP WHERE EID IN
(SELECT MGR FROM EMP
GROUP BY MGR HAVING COUNT(*) BETWEEN 4 AND 6);

151. WQTD THE DETAILS OF EMP WHO ARE GETTING FIRST MAX SALARY.
> SELECT * FROM EMP WHERE SAL IN
(SELECT MAX(SAL) FROM EMP);

152. WQTD THE DETAILS OF EMP WHO ARE GETTING 6TH MAX SALARY.
> SELECT * FROM EMP WHERE SAL=
(SELECT DISTINCT SAL FROM EMP 
ORDER BY SAL DESC
LIMIT 1 OFFSET 5);

153. WQTD THE DETAILS OF EMP WHO ARE GETTING 5TH MIN SAL.
> SELECT * FROM EMP WHERE SAL=
(SELECT DISTINCT SAL FROM EMP
ORDER BY SAL ASC
LIMIT 1 OFFSET 4);

154. WQTD THE DETAILS OF FIRST 5 MAX SALARY HOLDERS.
>SELECT SAL FROM 
(SELECT DISTINCT SAL FROM EMP
 ORDER BY SAL DESC
 LIMIT 5) RESULT;

155. WQTD THE DETAILS OF EMP WHO ARE GETTING SALARY MORE THAN AVG SALARY OF DEPT 113.
>SELECT * FROM EMP WHERE SAL>
(SELECT AVG(SAL) FROM EMP WHERE DNO=113);

156. WQTD THE DETAILS OF EMP WHO ARE GETTING SAL MORE THAN AVG SALARY OF HIS DEPT.
>SELECT * FROM EMP E1 WHERE SAL>
(SELECT AVG(SAL) FROM EMP WHERE DNO=E1.DNO);

157. WQTD THE DETAILS OF EMP WHO ARE ELDER THAN THEIR REPORTING MANAGERS.
>SELECT * FROM EMP E1 WHERE DOB<
(SELECT DOB FROM EMP WHERE EID=E1.MGR);

158. WQTD HE DETAILS OF EMP WHERE THE MANAGER AND EMPLOYEE HAVE SAME GENDER.
>SELECT * FROM EMP E1 WHERE GENDER IN
(SELECT GENDER FROM EMP WHERE EID=E1.MGR);

Drawbacks of sub query:
=======================
> We cannot get the data from multiple tables.
> We cannot display the data from multiple tables.
> Very complex to solve corelated sub queries.

JOINS:
______
It is used to retrieve the data from multiple tables simultaneously.

Types of JOINS:
================
1. Cartesian Joins or Cross Joins (Deprecated).
2. Inner Join ***
3. Self Join ***
4. Outer Join ***
   > LEFT Outer Join
   > RIGHT Outer Join
   > FULL Outer Join
5. Natural Joins (Deprecated)

Cartesian Join or Cross Join:
=============================
In cartesian join, The records of table 1 will be merged with records of table 2.

In cross join,
> The number of columns generated:
> The number of rows generated:

Syntax:
________
SELECT column_name
FROM table_name1 CROSS JOIN table_name2;

select * 
from emp cross join dept;

INNER JOIN:
===========
It is used to obtain the matched records.

Syntax: SELECT column_name
FROM table_name_1 INNER JOIN table_name_2
ON table_name_1.column_name=table_name_2.column_name;


159. WQTD THE EMP FNAME AND HIS DEPT NAME.
>SELECT FNAME,DNAME
 FROM EMP INNER JOIN DEPT
 ON EMP.DNO=DEPT.DNO;

160. WQTD CUSTOMER FNAME AND HIS LOCATION,CITY,STATE.
>SELECT FNAME,LOCATION,CITY,STATE
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID;

161. WQTD THE EMP FNAME,LNAME WHO HAS DELIVERED THE PRODUCT.
>SELECT DISTINCT FNAME,LNAME 
FROM EMP E1 INNER JOIN ORDERS O1
ON E1.EID=O1.EID;

162. WQTD EMP FNAME,LNAME,JOB,DNAME IF THE EMP IS WORKING HAS SALESMAN OR MANAGER.
>SELECT FNAME,LNAME,JOB,DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE JOB IN('SALESMAN','MANAGER');

163. WQTD EMP FNAME,LNAME,DNO,DNAME.
>SELECT E1.FNAME,E1.LNAME,E1.DNO,D1.DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO;

164. WQTD THE EMP FNAME,DNAME IF THE EMP IS WORKING IN HR DEPT.
>SELECT E1.FNAME,D1.DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE D1.DNAME='HR';

165. WQTD CUSTOMER FNAME,LOCATION AND CITY IF THE CUSTOMER BELONGS TO MUMBAI.
>SELECT C1.FNAME,L1.LOCATION,CITY
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID
WHERE L1.CITY='MUMBAI';

166. WQTD THE CUSTOMER FNAME AND PRODUCT NAME IF THE CUSTOMER HAS ORDERED ANY PRODUCT.
>SELECT *
FROM CUSTOMER C1 INNER JOIN ORDERS O1
ON C1.CID=O1.CID INNER  JOIN PRODUCT P1
ON O1.PRODUCT_ID=P1.PRODUCT_ID;

167. WQTD THE EMP FNAME,DNAME AND HIS WORKING LOCATION.
>SELECT E1.FNAME,E1.LNAME,D1.DNAME,L1.LOCATION
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO INNER JOIN LOCATION L1
ON L1.LID=D1.LID;

168. WQTD THE CUSTOMER FNAME,ORDER ID, DELIVERY DATE, PNAME,PRICE AS TOTAL_BILL,LOCATION,CITY AND STATE.
126. WQTD THE DNAME OF THE EMP WHO ARE WORKING IN THE SAME JOB ROLE AS KARAN"S JOB ROLE?
> SELECT DNO FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE JOB IN
(SELECT JOB FROM EMP WHERE FNAME='KARAN'));

127. WQTD THE LOCATION,CITY AND STATE OF MARKETING DEPT?
> SELECT LOCATION,CITY,STATE FROM LOCATION WHERE LID IN
SELECT LID FROM DEPT
WHERE DEPT ='MARKETING';

ALTER TABLE CUSTOMER
DROP COLUMN PRODUCT_ID;

ALTER TABLE ORDERS
ADD CID INT;

ALTER TABLE CUSTOMER
DROP COLUMN ORDER_ID;

UPDATE ORDERS SET CID=501 WHERE ORDER_ID=1201;

UPDATE ORDERS SET CID=501 WHERE ORDER_ID=1127;

UPDATE ORDERS SET CID=507 WHERE ORDER_ID=1127;

UPDATE ORDERS SET CID=511 WHERE ORDER_ID=1773;

UPDATE ORDERS SET CID=505 WHERE ORDER_ID=1111;

128. WQTD THE DETAILS OF EMP WHO LIVES IN MUMBAI?
>SELECT * FROM CUSTOMER WHERE LID IN
(SELECT LID FROM LOCATION WHERE CITY = 'MUMBAI');

129. WQTD THE WORKING LOCATION OF MURALI FROM TABLE?
>SELECT DNAME FROM LOCATION WHERE LID IN
(SELECT LID FROM LOCATION
WHERE FNAME='MURALI');

[OR]

SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE FNAME='MURALI'));

130. WQTD THE LOCATION OF EMP WHO ARE ALSO THE CUSTOMERS.
note: (DON'T USE DEPT TABLE)

SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM CUSTOMER WHERE CID IN
(SELECT CID FROM EMP WHERE CID IS NOT NULL));

131. WQTD THE LOCATION OF CUSTOMER WHO HAVE ORDERED ANY PRODUCT?
> SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT PRODUCT FROM LOCATION WHERE CID IN
(SELECT CID FROM CUSTOMER WHERE PID IS NOT NULL));

SELECT * FROM EMP WHERE CID IN
(SELECT CID FROM ORDERS);

132. WQTD THE EMP DETAILS WHO HAS DELIVERED THE PRODUCT TO MUMBAI CITY?
>SELECT * FROM EMP WHERE EID IN
(SELECT EID FROM ORDERS WHERE CID IN
(SELECT CID FROM CUSTOMER WHERE LID IN
(SELECT LID FROM LOCATION WHERE CITY='MUMBAI')));

133. WQTD THE DETAILS OF EMPS WHO ARE WORKING IN VIJAYNAGAR.
>SELECT * FROM EMP WHERE DNO IN
(SELECT DNO FROM DEPT WHERE LID IN
(SELECT LID FROM LOCATION WHERE LOCATION='VIJAYNAGAR'));

134. WQTD THE DETAILS OF EMP WHO ARE GETTING SALARY MORE THAN KIRAN?
> SELECT * FROM EMP WHERE SAL>
(SELECT SAL FROM EMP WHERE FNAME='KIRAN');

135. WQTD THE DETAILS OF EMP WHO ARE GETTING SAL MORE THAN ALL SALESMAN.
>SELECT * FROM EMP WHERE SAL>
(SELECT SAL FROM EMP WHERE JOB='SALESMAN');

ALL/ANY OPERATOR:
_________________
 These are multi values operators which takes single values at LHS and multiple values at RHS.
Syntax: column_name </> ALL/ANY (v1,v2,....);

> ALL operator works in the form of AND operator.
> ANY operator works in the form of OR operator.

136. WQTD THE DETAILS IF EMP WHO ARE GETTING SALARY MORE THAN ANY OF SALESMAN?
> SELECT * FROM EMP WHERE SAL>
ANY(SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN');
[OR]
SELECT * FROM EMP WHERE SAL>
(SELECT MAX(SAL) FROM EMP WHERE JOB='SALESMAN');

137. WQTD THE DETAILS OF EMP WHO ARE HIRED AFTER 2 YEARS OF JOINING OF SAMEER?
> SELECT * FROM EMP WHERE DOJ>
ALL(SELECT DATE_ADD(DOJ, INTERVAL 2 YEAR) FROM EMP WHERE FNAME='SAMEER');

138. WQTD THE DETAILS OF KIRAN'S MANAGER?
> SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='KIRAN');

139. WQTD THE FULL NAME OF DHARANI'S MANAGER?
> SELECT CONCAT(FNAME,' ',LNAME) "FULL_NAME" FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='DHARANI');

140. WQTD THE DEPT NAME OF HEMA'S MANAGER?
>SELECT DNAME FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE EID IN(SELECT MGR FROM EMP WHERE FNAME='HEMA'));

141. WQTD THE NUMBER OF EMP HIRED IN THE SAME MONTH?
> SELECT COUNT(*), DATE_FORMAT(DOJ,'%M')"MONTH_OF_HIRING" 
FROM EMP
GROUP BY DATE_FORMAT(DOJ,'%M') HAVING COUNT(*)>1;

142. WQTD THE WORKING LOCATION OF SAMEER'S MANAGER.
>SELECT LOCATION FROM LOCATION WHERE LID IN
(SELECT LID FROM DEPT WHERE DNO IN
(SELECT MGR FROM EMP WHERE FNAME='SAMEER'));

143. WQTD THE DETAILS OF FARIYA'S MANAGER'S MANAGER.
> SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE EID IN
(SELECT MGR FROM EMP WHERE FNAME='FARIYA'));

144. WQTD THE DETAILS OF EMP WHO ARE REPORTING TO SIDDARTH.
> SELECT * FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='SIDDARTH');

145. WQTD THE FNAME,LNAME OF THE EMP WHO ARE REPORTING TO RAHUL.
>SELECT FNAME,LNAME FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='RAHUL');

146. WQTD THE DEPT NAME OF THE EP WHO ARE REPORTIG TO HEMA.
>SELECT DNAME FROM DEPT WHERE DNO IN
(SELECT DNO FROM EMP WHERE MGR IN
(SELECT EID FROM EMP WHERE FNAME='HEMA'));

147. WQTD THE DETAILS OF EMP WHO ARE REPORTING TO KIRAN'S MANAGER.
> SELECT * FROM EMP WHERE MGR IN
(SELECT MGR FROM EMP WHERE FNAME='KIRAN'));

148. WQTD THE NUMBER OF EMPS REPORTING TO SAMEER.
> SELECT COUNT(*) FROM EMP WHERE MGR IN
(SELECT MGR FROM EMP WHERE FNAME='SAMEER');

149. WQTD THE DETAILS OF MANAGER WHERE ATLEAST 4 EMPS MUST BE REPORTING TO HIM.
>SELECT * FROM EMP WHERE EID IN
(SELECT MGR FROM EMP
GROUP BY MGR HAVING COUNT(*)>=4);
  
150. WQTD THE FNAME, LNAME OF MANAGER WHERE THE REPORTING ARE BETWEEN 4 AND 6.
> SELECT FNAME,LNAME FROM EMP WHERE EID IN
(SELECT MGR FROM EMP
GROUP BY MGR HAVING COUNT(*) BETWEEN 4 AND 6);

151. WQTD THE DETAILS OF EMP WHO ARE GETTING FIRST MAX SALARY.
> SELECT * FROM EMP WHERE SAL IN
(SELECT MAX(SAL) FROM EMP);

152. WQTD THE DETAILS OF EMP WHO ARE GETTING 6TH MAX SALARY.
> SELECT * FROM EMP WHERE SAL=
(SELECT DISTINCT SAL FROM EMP 
ORDER BY SAL DESC
LIMIT 1 OFFSET 5);

153. WQTD THE DETAILS OF EMP WHO ARE GETTING 5TH MIN SAL.
> SELECT * FROM EMP WHERE SAL=
(SELECT DISTINCT SAL FROM EMP
ORDER BY SAL ASC
LIMIT 1 OFFSET 4);

154. WQTD THE DETAILS OF FIRST 5 MAX SALARY HOLDERS.
>SELECT SAL FROM 
(SELECT DISTINCT SAL FROM EMP
 ORDER BY SAL DESC
 LIMIT 5) RESULT;

155. WQTD THE DETAILS OF EMP WHO ARE GETTING SALARY MORE THAN AVG SALARY OF DEPT 113.
>SELECT * FROM EMP WHERE SAL>
(SELECT AVG(SAL) FROM EMP WHERE DNO=113);

156. WQTD THE DETAILS OF EMP WHO ARE GETTING SAL MORE THAN AVG SALARY OF HIS DEPT.
>SELECT * FROM EMP E1 WHERE SAL>
(SELECT AVG(SAL) FROM EMP WHERE DNO=E1.DNO);

157. WQTD THE DETAILS OF EMP WHO ARE ELDER THAN THEIR REPORTING MANAGERS.
>SELECT * FROM EMP E1 WHERE DOB<
(SELECT DOB FROM EMP WHERE EID=E1.MGR);

158. WQTD HE DETAILS OF EMP WHERE THE MANAGER AND EMPLOYEE HAVE SAME GENDER.
>SELECT * FROM EMP E1 WHERE GENDER IN
(SELECT GENDER FROM EMP WHERE EID=E1.MGR);

Drawbacks of sub query:
=======================
> We cannot get the data from multiple tables.
> We cannot display the data from multiple tables.
> Very complex to solve corelated sub queries.

JOINS:
______
It is used to retrieve the data from multiple tables simultaneously.

Types of JOINS:
================
1. Cartesian Joins or Cross Joins (Deprecated).
2. Inner Join ***
3. Self Join ***
4. Outer Join ***
   > LEFT Outer Join
   > RIGHT Outer Join
   > FULL Outer Join
5. Natural Joins (Deprecated)

Cartesian Join or Cross Join:
=============================
In cartesian join, The records of table 1 will be merged with records of table 2.

In cross join,
> The number of columns generated:
> The number of rows generated:

Syntax:
________
SELECT column_name
FROM table_name1 CROSS JOIN table_name2;

select * 
from emp cross join dept;

INNER JOIN:
===========
It is used to obtain the matched records.

Syntax: SELECT column_name
FROM table_name_1 INNER JOIN table_name_2
ON table_name_1.column_name=table_name_2.column_name;


159. WQTD THE EMP FNAME AND HIS DEPT NAME.
>SELECT FNAME,DNAME
 FROM EMP INNER JOIN DEPT
 ON EMP.DNO=DEPT.DNO;

160. WQTD CUSTOMER FNAME AND HIS LOCATION,CITY,STATE.
>SELECT FNAME,LOCATION,CITY,STATE
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID;

161. WQTD THE EMP FNAME,LNAME WHO HAS DELIVERED THE PRODUCT.
>SELECT DISTINCT FNAME,LNAME 
FROM EMP E1 INNER JOIN ORDERS O1
ON E1.EID=O1.EID;

162. WQTD EMP FNAME,LNAME,JOB,DNAME IF THE EMP IS WORKING HAS SALESMAN OR MANAGER.
>SELECT FNAME,LNAME,JOB,DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE JOB IN('SALESMAN','MANAGER');

163. WQTD EMP FNAME,LNAME,DNO,DNAME.
>SELECT E1.FNAME,E1.LNAME,E1.DNO,D1.DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO;

164. WQTD THE EMP FNAME,DNAME IF THE EMP IS WORKING IN HR DEPT.
>SELECT E1.FNAME,D1.DNAME
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
WHERE D1.DNAME='HR';

165. WQTD CUSTOMER FNAME,LOCATION AND CITY IF THE CUSTOMER BELONGS TO MUMBAI.
>SELECT C1.FNAME,L1.LOCATION,CITY
FROM CUSTOMER C1 INNER JOIN LOCATION L1
ON C1.LID=L1.LID
WHERE L1.CITY='MUMBAI';

166. WQTD THE CUSTOMER FNAME AND PRODUCT NAME IF THE CUSTOMER HAS ORDERED ANY PRODUCT.
>SELECT *
FROM CUSTOMER C1 INNER JOIN ORDERS O1
ON C1.CID=O1.CID INNER  JOIN PRODUCT P1
ON O1.PRODUCT_ID=P1.PRODUCT_ID;

167. WQTD THE EMP FNAME,DNAME AND HIS WORKING LOCATION.
>SELECT E1.FNAME,E1.LNAME,D1.DNAME,L1.LOCATION
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO INNER JOIN LOCATION L1
ON L1.LID=D1.LID;

168. WQTD THE CUSTOMER FNAME,ORDER ID, DELIVERY DATE, PNAME,PRICE AS TOTAL_BILL,LOCATION,CITY AND STATE.
>SELECT C1.FNAME,O1.ORDER_ID,O1.DELIVERY_DATE,P1.PNAME,P1.PRICE "TOTAL_BILL",L1.LOCATION,L1.STATE,L1.CITY
FROM CUSTOMER C1 INNER JOIN ORDERS O1
ON C1.CID=O1.CID INNER JOIN PRODUCT P1
ON O1.PRODUCT_ID=P1.PRODUCT_ID INNER JOIN LOCATION L1
ON C1.LID=L1.LID;

169. WQTD EMP FNAME,LNAME,DNAME ALONG WITH DEPT LOCATION IF THE EMP FNAME STARTS WITH VOWELS AND DEPT LOCATION IS IN MYSORE CITY.
> SELECT E1.FNAME,E1.LNAME,D1.DNAME,L1.LOCATION
FROM EMP E1 INNER JOIN DEPT D1
ON E1.DNO=D1.DNO INNER JOIN LOCATION L1
ON D1.LID=L1.LID
WHERE FNAME LIKE '%A' OR FNAME LIKE '%E' OR FNAME LIKE '%I' OR FNAME LIKE '%O' OR FNAME LIKE '%U' AND L1.LOCATION='MYSORE';

170. WQTD THE CUSTOMER FNAME ALONG WITH LNAME'S FIRST CHARACTER AS CUSTOMER NAME, PRODUCT NAME, PRICE, ORDER ID, LOCATION CITY AS ADDRESS, EMPLOYEE NAME AS DELIVERY_BOY WHO DELIVERS THE PRODUCT TO MUMBAI CITY.
> SELECT CONCAT(C.FNAME,'',SUBSTR(C.LNAME,1,1)) "CUSTOMER_NAME', P.PNAME, P.PRICE "BILL", O.ORDER_ID, L.LOCATION,L.CITY "ADDRESS", E.FNAME "DELIVERY_BOY"
FROM CUSTOMER C INNER JOIN ORDERS O
ON C.CID=O.CID INNER JOIN PRODUCT P
ON O.PRODUCT_ID=P.PRODUCT_ID INNER JOIN LOCATION L
ON C.LID=L.LID INNER JOIN EMP E
ON E.EID=O.EID
WHERE CITY='MUMBAI';

SELF JOIN:
==========
> It is used to obtain the matched records from two same tables.
> It works same as inner join.
> Here, table level aliasing is mandatory.

Syntax:
_______
SELECT column_name
FROM table_name T1 JOIN table_name T2
ON T1.column_name=T2.column_name;

171. WQTD EMP NAME AND HIS MANAGER NAME.
>SELECT E1.FNAME "EMPLOYEE", E2.FNAME "MANAGER"
FROM EMP E1 JOIN EMP E2
ON E1.MGR=E2.EID;

172. WQTD THE EMP FNAME BIRTHDAY ALONG WITH MANAGER FNAME AND HIS BIRTHDAY IF THE EMP IS ELDER THAN HIS MANAGER.
> SELECT E1.FNAME,E1.DOB,E2.FNAME,E2.DOB 
FROM EMP E1 JOIN EMP E2
ON E1.MGR=E2.EID
WHERE E1.DOB<E2.DOB;

173. WQTD THE EMP FNAME DEPT NAME ALONG WITH MANAGER NAME.
> SELECT E1.FNAME,D1.DNAME,E2.FNAME
FROM EMP E1 JOIN EMP E2
ON E1.MGR=E2.EID INNER JOIN DEPT D1
ON E1.DNO=D1.DNO;

174. WQTD THE EMP FNAME, DNAME ALONG WITH MANAGER AND HIS DEPT NAME.
> SELECT E1.FNAME,D1.DNAME,E2.FNAME,D2.DNAME
FROM EMP E1 JOIN EMP E2
ON E1.MGR=E2.EID INNER JOIN DEPT D1
ON E1.DNO=D1.DNO INNER JOIN DEPT D2
ON E2.DNO=D2.DNO;

175. WQTD  THE EMP FNAME, EMP DEPT AND DEPT LOCATION ALONG WITH MANAGER DEPT AND DEPT LOCATION
>SELECT E1.FNAME,D1.DNAME,L1.LOCATION,E2.FNAME,D2.DNAME,L2.LOCATION
FROM EMP E1 JOIN DEPT D1
ON E1.DNO=D1.DNO INNER JOIN LOCATION L1
ON D1.LID=L1.LID INNER JOIN EMP E2
ON E1.MGR=E2.EID INNER JOIN DEPT D2
ON E2.DNO=D2.DNO INNER JOIN LOCATION L2
ON D2.LID=L2.LID;


select s.name,g.grade,s.marks
from students s inner join grades g
on s.marks between g.min_mark and g.max_mark
where g.grade>=8
order by g.grade desc,s.name asc;

select null,g.grade,s.marks
from students s inner join grades g
on s.marks between g.min_mark and g.max_mark
where g.grade<8
order by g.grade desc, s.marks asc;



176.WQTD THE EMP FNAME, EMP LNAME AND SALARY IF THE EMP IS GETTING SALARY MORE THAN KIRAN'S SALARY.
Hint:
// E1- the employee data to be displayed
//E2- kiran's data
>SELECT E1.FNAME,E1.LNAME,E1.SAL
FROM EMP E1 JOIN EMP E2
ON E1.SAL>E2.SAL
WHERE E2.FNAME='KIRAN';

177. WQTD THE EMP FNAME,SAL IF THE EMP'S ARE GETTING SAME SALARY.
> SELECT DISTINCT E1.FNAME,E1.SAL
FROM EMP E1 JOIN EMP E2
ON E1.SAL=E2.SAL AND E1.EID!=E2.EID
ORDER BY E1.SAL;

178. WQTD THE EMP FNAME,SAL,DNAME IF THE EMP IS WORKING IN SAME DEPT AND GETTING SAME SALARY.
> SELECT DISTINCT E1.FNAME,E1.SAL,D1.DNAME
FOM EMP E1 JOIN EMP E2
ON E1.DNO=E2.DNO AND E1.SAL=E2.SAL AND E1.EID!=E2.EID INNER JOIN DEPT D1
ON E1.DNO=D1.DNO
ORDER BY D1.DNAME;

OUTER JOIN:
==========
Outer joins are used to obtain the both matched records and unmatched records.

TYPES:
=======
1. Left Outer-Join
2. Right-Outer-Join
3. Full Outer Join

1. LEFT-OUTER JOIN:
____________________

It is used to obtain matched and unmatched records of LEFT Table.

Syntax:
_______
SELECT column_name
FROM table_name_1 [LEFT] OUTER JOIN table_name_2
ON table_name_1.column_name=table_name_2.column_name;

2. RIGHT OUTER JOIN:
____________________

It is used to obtain matched and unmatched records of RIGHT Table.

Syntax:
_______
SELECT column_name
FROM table_name_1 [right] OUTER JOIN table_name_2
ON table_name_1.column_name=table_name_2.column_name;

179. WQTD THE LOCATION NAME AND CITY WHERE NO CUSTOMERS ARE LIVING IN THAT AREA.
>SELECT L1.LOCATION,L1.CITY
FROM LOCATION L1 LEFT OUTER JOIN CUSTOMER C1
ON C1.LID=L1.LID
WHERE C1.LID IS NULL;

180. WQTD THE LOCATION,CITY WHERE NO DEPTS ARE LOCATED.  //CONCAT(LOCATION,CITY)
>SELECT CONCAT(L1.LOCATION,',',L1.CITY) AREA
FROM LOCATION L1 LEFT OUTER JOIN DEPT D1
ON L1.LID=D1.LID
WHERE D1.LID IS NULL;

181. WQTD THE TOTAL REVENUE GENERATED IN EACH STATE.  //PRODUCT,CUSTOMER,ORDERS
> SELECT SUM(PRICE) TOTAL_REVENUE,L1.STATE
FROM PRODUCT P1 INNER JOIN ORDERS O1
FROM P1.PRODUCT_ID=O1.PRODUCT_ID INNER JOIN LOCATION L1
ON C1.LID=L1.LID
GROUP BY L1.STATE
ORDER BY ASC;

182. WQTD THE TOTAL REVENUE GENERATED I EACH CITY.
> SELECT SUM(PRICE) TOTAL_REVENUE,L.CITY
FROM PRODUCT P INNER JOIN ORDERS O
ON P.PRODUCT_ID=O.PRODUCT_ID INNER JOIN CUSTOMER C
ON C.CID=O.CID INNER JOIN LOCATION L
ON C.LID=L.LID
GROUP BY L.CITY
PRDER BY TOTAL_REVENUE;

183. WQTD THE PRODUCT THAT HAS NOT BEEN ORDERED SO FAR.
> SELECT P1.PNAME,P1.PRICE 
FROM PRODUCT P1 LEFT OUTER JOIN ORDERSORDERS O1
ON P1.PRODUCT_ID=O1.PRODUCT_ID
WHERE 01.PRODUCT_IS IS NULL;

184. WQTD THE TOP 3 CUSTOMER BASED ON THE AMOUNT SPENT AND TOTAL NUMBER OF ORDERS.
> SELECT C.CID,SUM(PRICE) AS TOTAL
FROM PRODUCT P INNER JOIN ORDERS O
ON O.PRODUCT_ID=P.PRODUCT_ID INNER JOIN CUSTOMER C
ON C.CID=O.CID
GROUP BY CID
ORDER BY TOTAL DESC
LIMIT 3;

Natural Joins:
_______________
Natural joins are used to obtain only the matched records based on the column name from two tables.

Syntax:
________
SELECT column_name
FROM table_name_1 NATURAL JOIN table_name_2;



Simple Questions:
==================

1. can we duplicate a table with different table name?
>YES

CREATE TABLE EMP1 AS(SELECT * FROM EMP);

2. Can we able to duplicate the table with different database?
>YES

CREATE TABLE DATABASE_NAME.EMP2 AS (SELECT * FROM EMP);

3. Can we able to copy only the structure of the table?
>YES but no constraints will be added.

CREATE TABLE table_name AS (SELECT statement with a false condition);
CREATE TABLE EMP3 AS (SELECT * FROM EMP WHERE 1=1);

==================================
WHERE THE DQP RESULTS ARE STORED?
> CURSOR OR BUFFER MEMORY.
===================================

VIEWS: ******
------
> Views are the virtual tables.
> They don't require any space to store in database.
> Every resultant tables obtained from DQL are views.
> Views are used to overcome the problems of sub tables.

Syntax:
-------
CREATE VIEW view_name AS (SELECT statement);

Create a view for dispatcher.
>create view v_emp as (select * from emp where job='dispatcher');
select * from emp where job='dispatcher';

WQTD THE DETAILS OF TOP 5 SALARY HOLDERS:
SELECT *
FROM
(SELECT FNAME,SAL,RANK() OVER (ORDER BY SAL DESC) RANKINGS
FROM EMP) AS RES_TABLE
WHERE RANKINGS<5;


RANK() AND DENSE RANK():
========================
RANK() and DENSE_RANK() is used to assign the ranks for each and every row of the resultant table.

Syntax:
-------
RANK() OVER (ranking_condition);

RANK() assigns the rank based on the row number whereas DENSE_RANK() function assigns the rank based on the sequence of rank digits.

Creation of user in MYSQL:
--------------------------
Syntax:
CREATE USER 'user_name'@'localhost' IDENTIFIED BY 'password';

CREATE USER 'tom'@'localhost' IDENTIFIED BY 'jerry';

forget password: ALT USER 'tom'@'localhost' IDENTIFIED BY 'jerry';

TCL (Transaction Control Language):
======================================
1. COMMIT
2. ROLLBACK
3. SAVE POINT

1. COMMIT: This command is used to save the all the transactions(INSERT,DELETE, UPDATE) permanently inside a database.
Syntax: COMMIT;

Note: To disable auto command in MYSQL, we use
SET AUTOCOMMIT=0;

2. ROLLBACK: This command is used roll out all the transactions until the previously used commit statement.
Syntax: ROLLBACK;

> We can also rollback upto a certain savepoint.
Syntax: ROLLBACK TO savepoint_name;


3. SAVE POINT: This command is used to Mark a point in the middle of the transaction.
Syntax: SAVEPOINT savepoint_name;

DCL (Data Control Language) Commands:
=====================================
To deal with some of the data
1. GRANT
2. REVOKE

1. GRANT:
This statement is used to grant the permission to access the data for the other user.
Syntax: GRANT sql_statement ON table_name
	TO 'user_name'@'localhost';  

2. REVOKE:
This statement is used to take back the permission from the other user.
Syntax: REVOKE sql_statement ON table_name
	FROM 'user_name'@'localhost';

GRANT SELECT ON employee
TO 'tom'@'localhost';

REVOKE UPDATE ON emp
FROM 'tom'@'localhost';





























 
STORED PROEDURES:
__________________




    
















IN/NOT IN OPERATOR
__________________

In  operator is a multi valued operator which takes single value at LHS and multiple values at R



EX
use company;
CREATE TABLE EMP
(
EID INT PRIMARY KEY NOT NULL,
FNAME VARCHAR(20) NOT NULL,
LNAME VARCHAR(20) NOT NULL,
DOB DATE NOT NULL,
GENDER ENUM('M','F') NOT NULL,
JOB VARCHAR(20) NOT NULL,
MGR INT,
DOJ DATE NOT NULL,
SAL DECIMAL(10,2) NOT NULL,
COMM DECIMAL(10,2),
DNO INT,);

CID INT

ex
 INSERT INTO EMP VALUES(1603,'NANDINI','TENGLE','1995-11-30','F','MANAGER',NULL,'2014-01-15',6000000,NULL,114,NULL);
Query OK, 1 row affected (0.01 sec)




EX

INSERT INTO EMP VALUES
(1601,'SIDDARTH','PATIL','1985-11-24','M','CEO',NULL,'2016-01-16',500000,NULL,113,NULL),
(1602,'HEMA','SHETTY','1996-03-20','F','HR',1601,'2016-10-20',150000,NULL,114,507),
(1701,'RAHUL','MUKARJEE','1991-02-19','M','MANAGER',1602,'2017-04-17',100000,NULL,111,NULL),
(1702,'SAMEER','KHAN','1995-04-20','M','MANAGER',1602,'2017-07-07',90000,NULL,110,NULL),
(1801,'JAHNAVI','NAIK','1996-04-11','F','DISPATCHER',1702,'2020-02-15',450000,1000,110,502),
(1901,'SHIVANI','RAI','1998-11-07','F','TESTER',1601,'2019-12-12',450000,NULL,113,502),
(1902,'ABHIJIT','GOWDA','1997-12-25','M','DISPATCHER',1702,'2019-02-28',50000,NULL,110,505),
(1903,'KARAN','BHAT','1997-12-26','M','SALESMAN',1701,'2019-12-26',45000,NULL,111,NULL),
(2001,'MURALI','KRISHNAN','1998-06-08','M','DISPATCHER',1702,'2020-03-15',45000,1000,110,NULL),
(2002,'DHARANI','PATIL','1998-11-10','F','DEVELOPER',1601,'2021-06-20',30000,3000,113,NULL),
(2101,'RASHMI','GOWDA','1995-10-03','F','SALESMAN',1701,'2021-01-02',45000,3000,111,NULL),
(2102,'FARIYA','TAJ','1999-01-03','F','DEVELOPER',1601,'2021-03-01',32000,3600,113,NULL),
(2103,'PRIYA','SHETTY','1998-03-20','F','ACCOUNTANT',1602,'2021-05-01',32000,3600,112,NULL),
(2104,'AMAN','RAI','1998-08-15','M','SALESMAN',1701,'2021-12-26',40000,NULL,111,NULL),
(2201,'KIRAN','RAJ','1999-09-21','M','ACCOUNTANT',1602,'2022-08-28',30000,3600,112,503);

DESC EMP;
OR 
SELECT*FROM EMP;
create database company1;
 use company1;
create table customer_info
    (
     customer_id varchar(10) primary key,
     customer_name varchar(20),
     address varchar(100),
     Mobile bigint,
     email varchar(30)
     );
Query OK, 0 rows affected (0.06 sec)

 insert into customer_info 
values('cus100','ramesh','vijaynagar',9876534224,'ramesh123@gmail.com');
 insert into customer_info values('cus101','siddhart','rajajinagar',9990012465,'siddharth@gmail.com');
 insert into customer_info values('cus102','kiran','electonic_city',9654654445,'kirikkiran009@gmail.com');
 insert into customer_info values('cus104','akash','mysore',78765458765,'akash@gmail.com');
Query OK, 1 row affected (0.01 sec)

 select * from customer_info;
+-------------+---------------+----------------+-------------+-------------------------+
| customer_id | customer_name | address        | Mobile      | email                   |
+-------------+---------------+----------------+-------------+-------------------------+
| cus100      | ramesh        | vijaynagar     |  9876534224 | ramesh123@gmail.com     |
| cus101      | siddhart      | rajajinagar    |  9990012465 | siddharth@gmail.com     |
| cus102      | kiran         | electonic_city |  9654654445 | kirikkiran009@gmail.com |
| cus104      | akash         | mysore         | 78765458765 | akash@gmail.com         |
+-------------+---------------+----------------+-------------+-------------------------+
4 rows in set (0.00 sec)

select customer_name,concat(substr(customer_name,1,3),length(customer_name),substr(mobile,-3,3)) as customer_password
    -> from customer_info
    -> order by customer_name desc;
+---------------+-------------------+
| customer_name | customer_password |
+---------------+-------------------+
| siddhart      | sid8465           |
| ramesh        | ram6224           |
| kiran         | kir5445           |
| akash         | aka5765           |
+---------------+-------------------+
4 rows in set (0.00 sec)

___________________________________________


CREATE TABLE DEPT1
(
DNO INT PRIMARY KEY,
DNAME VARCHAR(45) NOT NULL,
LID INT
);

CREATE TABLE LOCATION
(
LID INT NOT NULL,
LOCATION VARCHAR(45) NOT NULL,
CITY VARCHAR(45) NOT NULL,
STATE VARCHAR(45) NOT NULL
);

CREATE TABLE CUSTOMER
(
CID INT NOT NULL,
FNAME VARCHAR(45) NOT NULL,
LNAME VARCHAR(45) NOT NULL,
LID INT,
ORDER_ID INT,
PRODUCT_ID INT
);

CREATE TABLE ORDERS
(
ORDER_ID INT NOT NULL,
PRODUCT_ID INT NOT NULL,
ORDER_DATE DATE NOT NULL,
DELIVERY_DATE DATE NOT NULL,
EID INT NOT NULL
);


CREATE TABLE ORDERS
(
ORDER_ID INT NOT NULL,
PRODUCT_ID INT NOT NULL,
ORDER_DATE DATE NOT NULL,
DELIVERY_DATE DATE NOT NULL,
EID INT NOT NULL
);

CREATE TABLE PRODUCT
(
PRODUCT_ID INT NOT NULL,
PNAME VARCHAR(45) NOT NULL,
PRICE DECIMAL(12,2) NOT NULL
);


INSERT INTO DEPT VALUES
(110,'DELIVERY',2),
(111,'MARKETING',2),
(112,'ACCOUNTING',1),
(113,'TECHNICAL',1),
(114,'HR',1);



INSERT INTO LOCATION VALUES
(1,'VIJAYNAGAR','BANGALORE','KARNATAKA'),
(2,'HEBBAL','MYSORE','KARNATAKA'),
(3,'RAJAJINAGAR','BANGALORE','KARNATAKA'),
(4,'KORMANGALA','BANGALORE','KARNATAKA'),
(5,'KUVEMPUNAGAR','MYSORE','KARNATAKA'),
(6,'AMEERPET','HYDERABAD','TELANGANA'),
(7,'RAIDURG','HYDERABAD','TELANGANA'),
(8,'DILSUKHNAGAR','HYDERABAD','TELANGANA'),
(9,'MARINA','CHENNAI','TAMIL_NADU'),
(10,'ANNA_NAGAR','CHENNAI','TAMIL_NADU'),
(11,'SAIDAPET','CHENNAI','TAMIL_NADU'),
(12,'ANDHERI','MUMBAI','MAHARASHTRA'),
(13,'JUHU','MUMBAI','MAHARASHTRA'),
(14,'GOREGAON','MUMBAI','MAHARASHTRA'),
(15,'BORIVALI','MUMBAI','MAHARASHTRA');

INSERT INTO CUSTOMER VALUES
(501,'SALMAN','KHAN',12,1201,809),
(502,'SHIVANI','RAI',1,NULL,NULL),
(503,'KIRAN','RAJ',2,NULL,NULL),
(504,'VIHAN','PRASAD',7,NULL,NULL),
(505,'ABHIJIT','GOWDA',11,1111,801),
(506,'KARAN','BHAT',9,NULL,NULL),
(507,'HEMA','SHETTY',3,1127,805),
(508,'PUNITH','GOWDA',4,NULL,NULL),
(509,'PATRICK','JOHNSON',13,NULL,NULL),
(510,'JEEVAN','RAJ',10,NULL,NULL),
(511,'SELVA','MANI',12,1773,801),
(512,'IRFAN','MOHAMMED',5,NULL,NULL);

INSERT INTO ORDERS VALUES
(1111,801,'2022-11-10','2022-11-12',1801),
(1127,805,'2022-11-28','2022-12-01',1902),
(1201,809,'2022-12-05','2022-12-08',2001),
(1773,801,'2022-12-19','2022-12-22',1801);

INSERT INTO PRODUCT VALUES
(801,'WALLET',2000),
(802,'CHAIN',20000),
(803,'WATCH',15000),
(804,'EAR PODS',1500),
(805,'MOTO',1000),
(806,'MIVI',1300),
(807,'NOISE',2500),
(808,'PTRON',800),
(809,'REALME',1750);